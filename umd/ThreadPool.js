!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("./Thread.js")):"function"==typeof define&&define.amd?define(["./Thread.js"],t):"object"==typeof exports?exports.ThreadPool=t(require("./Thread.js")):e.ThreadPool=t(e.Thread)}(window,function(e){return function(e){var t={};function r(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,r),a.l=!0,a.exports}return r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)r.d(i,a,function(t){return e[t]}.bind(null,a));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=1)}([function(t,r){t.exports=e},function(e,t,r){"use strict";r.r(t);var i=r(0),a=r.n(i);t.default=class{get ready(){return this._activeThreads<this._capacity}get activeThreads(){return this._activeThreads}get capacity(){return this._capacity}constructor(e,t,r={},i=[],a={}){this._capacity=e,this._activeThreads=0,this._threads=[],this._threadArgs=[t,r,i],a.initializeImmediately&&this._createThreadsUpTo(this.capacity)}run(){this._activeThreads=Math.min(this._activeThreads+1,this._capacity),this._createThreadsUpTo(this._activeThreads);const e=this._threads.filter(e=>!e.running)[0];return e?new Promise((t,r)=>{e.run(...arguments).then(e=>{this._activeThreads--,t(e)}).catch(e=>{this._activeThreads--,r(e)})}):null}dispose(){this._capacity=0,this._activeThreads=0,this._threads.forEach(e=>e.dispose()),this._threads=[]}_createThread(){this._threads.push(new a.a(...this._threadArgs))}_createThreadsUpTo(e){(e=Math.min(e,this.capacity))>this._threads.length&&this._createThread()}}}])});